'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _passportOauth = require('passport-oauth');

/**
 * `Strategy` constructor.
 * The Google Plus authentication strategy authenticates requests by delegating to Google Plus using OAuth2 access tokens.
 * Applications must supply a `verify` callback which accepts a accessToken, refreshToken, profile and callback.
 * Callback supplying a `user`, which should be set to `false` if the credentials are not valid.
 * If an exception occurs, `error` should be set.
 *
 * Options:
 * - clientID          Identifies client to Google App
 * - clientSecret      Secret used to establish ownership of the consumer key
 * - passReqToCallback If need, pass req to verify callback
 *
 * @param {Object} _options
 * @param {Function} _verify
 * @constructor
 * @example
 * passport.use(new GooglePlusTokenStrategy({
 *   clientID: '123456789',
 *   clientSecret: 'shhh-its-a-secret'
 * }), function(req, accessToken, refreshToken, profile, next) {
 *   User.findOrCreate({googleId: profile.id}, function(error, user) {
 *     next(error, user);
 *   });
 * });
 */

var GooglePlusTokenStrategy = (function (_OAuth2Strategy) {
  _inherits(GooglePlusTokenStrategy, _OAuth2Strategy);

  function GooglePlusTokenStrategy(_options, _verify) {
    _classCallCheck(this, GooglePlusTokenStrategy);

    var options = _options || {};
    var verify = _verify;

    options.authorizationURL = options.authorizationURL || 'https://accounts.google.com/o/oauth2/auth';
    options.tokenURL = options.tokenURL || 'https://accounts.google.com/o/oauth2/token';

    _get(Object.getPrototypeOf(GooglePlusTokenStrategy.prototype), 'constructor', this).call(this, options, verify);

    this.name = 'google-plus-token';
    this._accessTokenField = options.accessTokenField || 'access_token';
    this._refreshTokenField = options.refreshTokenField || 'refresh_token';
    this._profileURL = options.profileURL || 'https://www.googleapis.com/plus/v1/people/me';
    this._passReqToCallback = options.passReqToCallback;

    this._oauth2.useAuthorizationHeaderforGET(true);
  }

  /**
   * Authenticate method
   * @param {Object} req
   * @param {Object} options
   * @returns {*}
   */

  _createClass(GooglePlusTokenStrategy, [{
    key: 'authenticate',
    value: function authenticate(req, options) {
      var _this = this;

      var accessToken = req.body && req.body[this._accessTokenField] || req.query && req.query[this._accessTokenField];
      var refreshToken = req.body && req.body[this._refreshTokenField] || req.query && req.query[this._refreshTokenField];

      if (!accessToken) return this.fail({ message: 'You should provide ' + this._accessTokenField });

      this._loadUserProfile(accessToken, function (error, profile) {
        if (error) return _this.error(error);

        var verified = function verified(error, user, info) {
          if (error) return _this.error(error);
          if (!user) return _this.fail(info);

          return _this.success(user, info);
        };

        if (_this._passReqToCallback) {
          _this._verify(req, accessToken, refreshToken, profile, verified);
        } else {
          _this._verify(accessToken, refreshToken, profile, verified);
        }
      });
    }

    /**
     * Parse user profile
     * @param {String} accessToken Google OAuth2 access token
     * @param {Function} done
     */
  }, {
    key: 'userProfile',
    value: function userProfile(accessToken, done) {
      this._oauth2.get(this._profileURL, accessToken, function (error, body, res) {
        if (error) {
          try {
            var errorJSON = JSON.parse(error.data);
            return done(new _passportOauth.InternalOAuthError(errorJSON.error.message, errorJSON.error.code));
          } catch (_) {
            return done(new _passportOauth.InternalOAuthError('Failed to fetch user profile', error));
          }
        }

        try {
          var json = JSON.parse(body);
          var profile = {
            provider: 'google-plus',
            id: json.id,
            displayName: json.displayName || '',
            name: {
              familyName: json.name && json.name.familyName || '',
              givenName: json.name && json.name.givenName || ''
            },
            emails: json.emails || [],
            photos: [{
              value: json.image && json.image.url || ''
            }],
            _raw: body,
            _json: json
          };

          return done(null, profile);
        } catch (e) {
          return done(e);
        }
      });
    }
  }]);

  return GooglePlusTokenStrategy;
})(_passportOauth.OAuth2Strategy);

exports['default'] = GooglePlusTokenStrategy;
module.exports = exports['default'];